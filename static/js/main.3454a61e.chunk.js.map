{"version":3,"sources":["components/top/weather.jsx","components/top/top.jsx","components/bottom/forecast.jsx","components/bottom/bottom.jsx","App.jsx","serviceWorker.js","store.js","index.js"],"names":["Weather","_this$props","this","props","temp_c","isDay","text","iconURL","city","react_default","a","createElement","className","src","alt","React","Component","TopSection","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","e","keyCode","state","eventEmitter","setState","prevState","isSelectLocationToggled","emit","onSelectLocation","bind","assertThisInitialized","toggleSelectLocation","onLocationChange","target","value","_this2","weather_Weather","esm","_ref","ref","onClick","placement","_ref2","style","arrowProps","data-placement","htmlFor","id","type","placeholder","onChange","onKeyDown","autoFocus","Forcast","forecastDay","date","day","condition","icon","avgtemp_c","BottomSection","forecastdays","map","forecast_Forcast","key","App","numForcast","isLoading","_this$state","URL","concat","axios","get","then","res","data","current","is_day","includes","replace","forecast","forecastday","catch","err","console","error","_this3","updateWeather","on","log","_this$state2","top_TopSection","bottom_BottomSection","Boolean","window","location","hostname","match","Store","EventEmitter","appName","Children","children","child","cloneElement","objectSpread","ReactDOM","render","store_Store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3454a61e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Weather extends React.Component {\r\n\r\n    render() {\r\n        const { temp_c, isDay, text, iconURL, city } = this.props;\r\n\r\n        return (<div className=\"weather-container\">\r\n            <div className=\"header\">{city}</div>\r\n            <div className=\"inner-container\">\r\n                <div className=\"image\"><img src={iconURL} alt='Weather_icon'/></div>\r\n                <div className=\"weather-now\">{temp_c}Â°C</div>\r\n            </div>\r\n            <div className=\"footer\">\r\n            <div className='isDay'>{isDay === 1 ? 'Day' : 'Night'}</div>\r\n            <div className='condition'>{text}</div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './style.scss'\r\n\r\nimport Weather from './weather';\r\n\r\nimport { Manager, Reference, Popper} from 'react-popper';\r\n\r\nexport default class TopSection extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isSelectLocationToggled: false\r\n        };\r\n        this.onSelectLocation = this.onSelectLocation.bind(this);\r\n        this.toggleSelectLocation = this.toggleSelectLocation.bind(this);\r\n        this.onLocationChange = this.onLocationChange.bind(this);\r\n\r\n    }\r\n\r\n    toggleSelectLocation() {\r\n        this.setState((prevState) => ({ isSelectLocationToggled: !prevState.isSelectLocationToggled }));\r\n    }\r\n\r\n    onLocationChange(e) {\r\n        this.setState({ city: e.target.value });\r\n    }\r\n\r\n    onSelectLocation() {\r\n        const { city } = this.state;\r\n        const { eventEmitter } = this.props;\r\n        this.setState((prevState) => ({ isSelectLocationToggled: !prevState.isSelectLocationToggled }));\r\n        eventEmitter.emit('updateWeather', city);\r\n        \r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if (e.keyCode === 13) {\r\n        const { city } = this.state;\r\n        const { eventEmitter } = this.props;\r\n        this.setState((prevState) => ({ isSelectLocationToggled: !prevState.isSelectLocationToggled }));\r\n        eventEmitter.emit('updateWeather', city);\r\n        } \r\n    }\r\n\r\n\r\n    render() {\r\n        const { isSelectLocationToggled } = this.state;\r\n\r\n        return <div className='top-container'>\r\n            <div className=\"title\">Weather-er</div>\r\n            <Weather {...this.props}/>\r\n            <Manager>\r\n                <Reference>\r\n                    {({ ref }) => (\r\n                        <button className='btn btn-select-location' \r\n                        ref={ref} \r\n                        onClick={this.toggleSelectLocation}>\r\n                        Select Location\r\n                        </button>\r\n                )}\r\n                </Reference>\r\n                <Popper placement=\"top\">\r\n                    {({ ref, style, placement, arrowProps }) => ( isSelectLocationToggled &&\r\n            <div className='popup-container' \r\n                ref={ref} \r\n                style={style}\r\n                data-placement={placement}>\r\n                    <div className='popup-form'>\r\n                        <label htmlFor=\"location-name\">Location Name</label>\r\n                        <input id='location-name' type=\"text\" placeholder='Location name' onChange={this.onLocationChange} onKeyDown={this.handleKeyDown} autoFocus/>\r\n                        <div className=\"buttons\">\r\n                        <button className=\"btn btn-select-location\" onClick={this.onSelectLocation}>Select</button>\r\n                        <button className='btn btn-cancel-location' onClick={this.toggleSelectLocation}>Cancel</button>\r\n                        </div>\r\n                    </div>\r\n            <div ref={arrowProps.ref} style={arrowProps.style} />\r\n        </div>\r\n      )}\r\n    </Popper>\r\n  </Manager>\r\n</div>\r\n}\r\n}","import React from 'react';\r\n\r\nimport './style.scss';\r\n\r\nexport default class Forcast extends React.Component {\r\n    render() {\r\n        const {forecastDay} = this.props;\r\n        if (!forecastDay) return null;\r\n        return (\r\n            <div className='forcast-day'>\r\n                <h3 className='date'>{forecastDay.date}</h3>\r\n                <div className=\"image\">\r\n                <img src={forecastDay.day.condition.icon} alt=\"condition icon\" />\r\n                </div>\r\n                <div className=\"text\">{forecastDay.day.avgtemp_c}Â°C</div>\r\n                <div className=\"info\">{forecastDay.day.condition.text}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","    \r\nimport React from 'react';\r\n\r\nimport './style.scss';\r\n\r\nimport Forcast from './forecast';\r\n\r\nexport default class BottomSection extends React.Component {\r\n\r\n    render() {\r\n        const { forecastdays } = this.props;\r\n        return (\r\n        <div className='bottom-container'>\r\n            {forecastdays && forecastdays.map((forecastDay, id) => {\r\n                return <Forcast forecastDay={forecastDay} key={id}/>\r\n            })}\r\n        </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n\nimport './sass/app.scss';\n\nimport TopSection from './components/top/top'\nimport BottomSection from './components/bottom/bottom'\n\nimport axios from 'axios';\n\nconst KEY = '53a5089a8bc4432a819162850190205';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super (props);\n    this.state = {\n      city: 'New_York',\n      numForcast: 4,\n      isLoading: true\n    };\n  }\n\n  updateWeather() {\n    const {city, numForcast} = this.state;\n    const URL = `https://api.apixu.com/v1/forecast.json?key=${KEY}   &q=${city}&days=${numForcast}`\n    axios.get(URL).then((res) => {\n      return res.data;\n    }).then((data) => {\n      this.setState({\n        isLoading: false,\n        temp_c: data.current.temp_c, \n        isDay: data.current.is_day, \n        text: data.current.condition.text, \n        iconURL: data.current.condition.icon,\n        city: city.includes('_') ? city.replace('_', ' ') : city,\n        forecastdays: data.forecast.forecastday\n      })\n    })\n    .catch((err) => {\n      if(err) {\n        console.error('Weather API fetching has been failed, ', err);\n      }\n    });\n  }\n\n  componentDidMount() {\n    const { eventEmitter } = this.props;\n\n    this.updateWeather();\n\n    eventEmitter.on('updateWeather', (data) => {\n      this.setState({ city: data }, () => { this.updateWeather() });\n      console.log('Location name(city): ', data);\n    });\n  }\n\n  render() {\n\n    const { city, temp_c, isDay, text, iconURL, isLoading, forecastdays} = this.state;\n\n    return (\n      <div className='app-container'>\n      <div className ='main-container'> \n      {isLoading && <h3>Loading weather...</h3>}\n      {!isLoading  && (\n        <div className='top-section'>\n        <TopSection city={city}\n         temp_c={temp_c}\n          isDay={isDay}\n          text={text}\n          iconURL={iconURL}\n          eventEmitter={this.props.eventEmitter}\n          />\n      </div>\n      )}\n      <div className='bottom-section'>\n        <BottomSection forecastdays={forecastdays} />\n      </div>\n    </div>\n  </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nimport { EventEmitter } from 'events';\r\n\r\nexport default class Store extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.eventEmitter = new EventEmitter();\r\n        this.state = {\r\n            appName: 'R-Weather'\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return React.Children.map(this.props.children, child => {\r\n          return React.cloneElement(child, {\r\n            ...this.state,\r\n            eventEmitter: this.eventEmitter\r\n          });\r\n        });\r\n      }\r\n    }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nimport Store from './store';\n\nReactDOM.render(\n    <Store>\n      <App />\n    </Store>,\n    document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}